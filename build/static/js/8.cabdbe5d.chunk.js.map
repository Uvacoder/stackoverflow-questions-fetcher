{"version":3,"sources":["core/hooks/useChangeTitle.js","core/services/service.api.js","core/api/questions.ts","core/api/index.ts","ui/components/DisplayThread.tsx","ui/components/NewestPanel.tsx","ui/views/Newest.tsx"],"names":["useChangeTitle","titleValue","ServiceApi","axios","defaults","baseURL","Api","questions","get","params","url","Paragraph","Placeholder","tooltip","DisplayThread","React","memo","open","onClose","undefined","data","handleClose","className","full","Header","Title","placement","controlId","trigger","speaker","onClick","window","link","title","question_id","view_count","up_vote_count","is_answered","Body","body_markdown","rows","children","remarkPlugins","remarkGfm","Footer","appearance","moment","updateLocale","week","dow","_times","startOf","toDate","endOf","subtract","today","NewestPanel","autoHeight","useState","loading","setLoading","setHas_more","questionsData","setQuestionsData","dateRange","setDateRange","page","setPage","pagesize","setPagesize","sort","order","setOrder","tagged","setTagged","useEffect","fetchQuestions","a","_fromdate","findSelectedDateRangeName","unix","_todate","join","site","fromdate","todate","filter","res","console","log","items","has_more","last7days","dateFns","Date","this_time1","format","this_time2","last_time1","last_time2","last7days1","last7days2","today1","today2","t1","t2","header","length","shaded","defaultExpanded","bordered","layout","Group","ControlLabel","cleanable","searchable","value","onChange","v","Number","parseInt","toString","label","style","width","tags","newTags","placeholder","maxTags","removeOnBackspace","showOneCalendar","locale","sunday","monday","tuesday","wednesday","thursday","friday","saturday","ok","ranges","marginTop","active","height","wordWrap","affixHorizontalScrollbar","rowClassName","onRowClick","rowData","align","fixed","index","flexGrow","dataKey","creation_date","prev","last","next","first","size","total","limit","maxButtons","activePage","onChangePage","Newest","meta","setOpen","rowClickedData","setRowClickedData"],"mappings":"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","file":"static/js/8.cabdbe5d.chunk.js","sourcesContent":["/* eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst useChangeTitle = (titleValue = \"\") => {\r\n  return (\r\n    <Helmet>\r\n      <title>{`${titleValue}`}</title>\r\n    </Helmet>\r\n  );\r\n};\r\n\r\nexport { useChangeTitle };\r\n","import axios from \"axios/index\";\r\n\r\nconst ServiceApi = axios;\r\nServiceApi.defaults.baseURL = \"https://api.stackexchange.com/2.3\";\r\n\r\nexport { ServiceApi };\r\n","/* eslint-disable */\r\nimport { IQuestionsResponse, IRootResponse, ORDER, SORT } from \"../interfaces\";\r\nimport { ServiceApi } from \"../services/service.api\";\r\n\r\nconst baseServiceUrl = \"/questions\";\r\n\r\ninterface IQuestionParams {\r\n  page: number;\r\n  pagesize: number;\r\n  order: ORDER;\r\n  sort: SORT;\r\n  tagged: string;\r\n  site: \"stackoverflow\";\r\n  fromdate?: number;\r\n  todate?: number;\r\n  filter?: string;\r\n}\r\n\r\nconst questions = {\r\n  get: (params: IQuestionParams) => {\r\n    const url = `${baseServiceUrl}`;\r\n    return ServiceApi.get(url, { params }) as Promise<\r\n      IRootResponse<IQuestionsResponse>\r\n    >;\r\n  },\r\n};\r\n\r\nexport { questions };\r\n","import { questions } from \"./questions\";\r\n\r\nexport const Api = {\r\n  questions,\r\n};\r\n","/* eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonToolbar,\r\n  Divider,\r\n  Modal,\r\n  Placeholder,\r\n  Tooltip,\r\n  Whisper,\r\n} from \"rsuite\";\r\nimport { IQuestionItem } from \"../../core/interfaces\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n//@ts-ignore\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nimport ResizeIcon from \"@rsuite/icons/Resize\";\r\n\r\ninterface IDisplayThreadProps {\r\n  open: boolean;\r\n  onClose: (() => void) | undefined;\r\n  data: IQuestionItem | undefined;\r\n}\r\nconst { Paragraph } = Placeholder;\r\n\r\nconst tooltip = (\r\n  <Tooltip>\r\n    Click here to open the question on the stack overflow website.\r\n  </Tooltip>\r\n);\r\n\r\nconst DisplayThread: React.FC<IDisplayThreadProps> = React.memo(\r\n  ({ open = false, onClose = undefined, data = undefined }) => {\r\n    const handleClose = () => {\r\n      if (onClose) onClose();\r\n    };\r\n\r\n    return (\r\n      <div className=\"modal-container\">\r\n        <Modal full open={open} onClose={handleClose}>\r\n          <Modal.Header>\r\n            <Modal.Title className=\"mb-0\">\r\n              <Whisper\r\n                placement=\"bottomStart\"\r\n                controlId=\"control-id-hover\"\r\n                trigger=\"hover\"\r\n                speaker={tooltip}\r\n              >\r\n                <span\r\n                  className=\"text-xl font-semibold text-gray-900 cursor-pointer hover:opacity-70 hover:underline flex flex-row justify-start items-center\"\r\n                  onClick={() => {\r\n                    window.open(data?.link);\r\n                  }}\r\n                >\r\n                  <ResizeIcon className=\"mr-2\" />\r\n                  {data?.title}\r\n                </span>\r\n              </Whisper>\r\n\r\n              <div className=\"flex flex-row justify-start items-center mt-2\">\r\n                <span className=\"text-xs\">{`Question ID: ${data?.question_id} | View count: ${data?.view_count} | Up vote count: ${data?.up_vote_count} | Is answered?`}</span>\r\n                &nbsp;\r\n                <span\r\n                  className={`text-xs font-semibold ${\r\n                    data?.is_answered ? \"text-green-600\" : \"text-red-600\"\r\n                  }`}\r\n                >\r\n                  {data?.is_answered ? \" YES\" : \" NO\"}\r\n                </span>\r\n              </div>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Divider />\r\n          <Modal.Body>\r\n            {!data?.body_markdown && <Paragraph rows={8} />}\r\n            {data?.body_markdown && (\r\n              <ReactMarkdown\r\n                children={data?.body_markdown}\r\n                remarkPlugins={[remarkGfm]}\r\n              />\r\n            )}\r\n          </Modal.Body>\r\n          <Modal.Footer className=\"mx-6 my-2\">\r\n            <Button onClick={handleClose} className=\"w-24\" appearance=\"primary\">\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport { DisplayThread };\r\n\r\nconst styles = {};\r\n","/* eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Panel,\r\n  Placeholder,\r\n  List,\r\n  PanelGroup,\r\n  Divider,\r\n  Pagination,\r\n  Form,\r\n  SelectPicker,\r\n  TagInput,\r\n  InputGroup,\r\n  Input,\r\n  DateRangePicker,\r\n  Table,\r\n  Modal,\r\n} from \"rsuite\";\r\nimport { Api } from \"../../core/api\";\r\nimport { useChangeTitle } from \"../../core/hooks/useChangeTitle\";\r\nimport { IQuestionItem, ORDER, SORT } from \"../../core/interfaces\";\r\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\r\nimport Search from \"@rsuite/icons/Search\";\r\nimport moment from \"moment\";\r\nimport * as dateFns from \"date-fns\";\r\nimport { Cell, Column, HeaderCell } from \"rsuite-table\";\r\nmoment.updateLocale(\"en\", {\r\n  week: {\r\n    dow: 0, // 0 to 6 sunday to saturday\r\n  },\r\n});\r\nconst _times = {\r\n  //than get current week or get last week according to Sun -- Sat\r\n  \"This Week\": [\r\n    moment().startOf(\"week\").toDate(),\r\n    moment().endOf(\"week\").toDate(),\r\n  ],\r\n  \"Last Week\": [\r\n    moment().startOf(\"week\").subtract(7, \"days\").toDate(),\r\n    moment().endOf(\"week\").subtract(7, \"days\").toDate(),\r\n  ],\r\n  today: [moment().startOf(\"day\").toDate(), moment().endOf(\"day\").toDate()],\r\n};\r\n\r\nconst { Paragraph } = Placeholder;\r\n\r\ninterface INewestPanelProps {\r\n  onClick?: (item: IQuestionItem) => void;\r\n  autoHeight?: boolean;\r\n}\r\n\r\nconst NewestPanel: React.FC<INewestPanelProps> = React.memo(\r\n  ({ onClick, autoHeight = false }) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [has_more, setHas_more] = useState(false);\r\n    const [questionsData, setQuestionsData] = useState<IQuestionItem[]>([]);\r\n    const [dateRange, setDateRange] = useState(_times[\"Last Week\"]);\r\n    //--options\r\n    const [page, setPage] = useState(1);\r\n    const [pagesize, setPagesize] = useState(10);\r\n    const [sort, setSort] = useState<SORT>(\"creation\");\r\n    const [order, setOrder] = useState<ORDER>(\"desc\");\r\n    const [tagged, setTagged] = useState([\"android\"]);\r\n\r\n    //-- default filter items\r\n    const def_pagesize = [\r\n      {\r\n        label: \"10 per page\",\r\n        value: 10,\r\n      },\r\n      {\r\n        label: \"20 per page\",\r\n        value: 20,\r\n      },\r\n      {\r\n        label: \"30 per page\",\r\n        value: 30,\r\n      },\r\n    ];\r\n    const def_sort_by = [\r\n      //order\r\n      {\r\n        label: \"Newest\",\r\n        value: \"desc\",\r\n      },\r\n      {\r\n        label: \"Oldest\",\r\n        value: \"asc\",\r\n      },\r\n    ];\r\n\r\n    useEffect(() => {\r\n      fetchQuestions();\r\n    }, [page, pagesize, sort, order, tagged, dateRange]);\r\n\r\n    const fetchQuestions = async () => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        //to fix select today range\r\n        let _fromdate =\r\n          findSelectedDateRangeName() === \"Today\"\r\n            ? moment(_times[\"today\"][0]).unix()\r\n            : moment(dateRange[0]).unix();\r\n        let _todate =\r\n          findSelectedDateRangeName() === \"Today\"\r\n            ? moment(_times[\"today\"][1]).unix()\r\n            : moment(dateRange[1]).unix();\r\n\r\n        const res = await Api.questions.get({\r\n          page: page,\r\n          pagesize: pagesize,\r\n          sort: sort,\r\n          order: order,\r\n          tagged: tagged.join(\";\"),\r\n          site: \"stackoverflow\",\r\n          fromdate: _fromdate,\r\n          todate: _todate,\r\n          filter: \"!6VvPDzO8siz87\", //add body_markdown & up_vote_count fields\r\n        });\r\n        const { data } = res;\r\n        console.log(\"res\", data);\r\n        setQuestionsData(data.items);\r\n        setHas_more(data.has_more);\r\n      } catch (error) {\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const findSelectedDateRangeName = () => {\r\n      if (!dateRange) return \"-\";\r\n      let last7days = [dateFns.subDays(new Date(), 6), new Date()];\r\n\r\n      let this_time1 = moment(_times[\"This Week\"][0]).format(\"DDMMYYYY\");\r\n      let this_time2 = moment(_times[\"This Week\"][1]).format(\"DDMMYYYY\");\r\n      let last_time1 = moment(_times[\"Last Week\"][0]).format(\"DDMMYYYY\");\r\n      let last_time2 = moment(_times[\"Last Week\"][1]).format(\"DDMMYYYY\");\r\n      let last7days1 = moment(last7days[0]).format(\"DDMMYYYY\");\r\n      let last7days2 = moment(last7days[1]).format(\"DDMMYYYY\");\r\n      let today1 = moment(_times[\"today\"][0]).format(\"DDMMYYYY\");\r\n      let today2 = moment(_times[\"today\"][0]).format(\"DDMMYYYY\");\r\n      //--dates from date range\r\n      let t1 = moment(dateRange[0]).format(\"DDMMYYYY\");\r\n      let t2 = moment(dateRange[1]).format(\"DDMMYYYY\");\r\n\r\n      if (t1 === last_time1 && t2 === last_time2) return \"Last week\";\r\n      else if (t1 === this_time1 && t2 === this_time2) return \"This week\";\r\n      else if (t1 === last7days1 && t2 === last7days2) return \"Last 7 days\";\r\n      else if (t1 === today1 && t2 === today2) return \"Today\";\r\n      else return \"Custom\";\r\n    };\r\n    return (\r\n      <div>\r\n        <Panel\r\n          header={\r\n            <div className=\"text-xl font-bold\">\r\n              {`Newest ${\r\n                tagged.length > 0 ? `[ ${tagged.join(\" & \")} ] related` : \"all\"\r\n              } questions`}\r\n            </div>\r\n          }\r\n          shaded\r\n          defaultExpanded\r\n        >\r\n          <Panel bordered className=\"mb-4 bg-gray-50\">\r\n            <Form layout=\"inline\">\r\n              <Form.Group>\r\n                <Form.ControlLabel>Items:</Form.ControlLabel>\r\n                <SelectPicker\r\n                  cleanable={false}\r\n                  searchable={false}\r\n                  value={pagesize}\r\n                  onChange={(v) => {\r\n                    setPagesize(Number.parseInt(v.toString()));\r\n                    setPage(1);\r\n                  }}\r\n                  data={def_pagesize}\r\n                  style={{ width: 120 }}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.ControlLabel>Sort:</Form.ControlLabel>\r\n                <SelectPicker\r\n                  cleanable={false}\r\n                  searchable={false}\r\n                  value={order}\r\n                  onChange={(v) => {\r\n                    //@ts-ignore\r\n                    setOrder(v);\r\n                    setPage(1);\r\n                  }}\r\n                  data={def_sort_by}\r\n                  style={{ width: 120 }}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.ControlLabel>Search:</Form.ControlLabel>\r\n              <Form.Group style={{ width: 350 }}>\r\n                <ReactTagInput\r\n                  tags={tagged}\r\n                  onChange={(newTags) => {\r\n                    setTagged(newTags);\r\n                    setPage(1);\r\n                  }}\r\n                  placeholder=\"Type and press enter\"\r\n                  maxTags={4}\r\n                  removeOnBackspace={true}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.ControlLabel>{`Date (${findSelectedDateRangeName()}):`}</Form.ControlLabel>\r\n\r\n                <DateRangePicker\r\n                  cleanable={false}\r\n                  className=\"\"\r\n                  //@ts-ignore\r\n                  value={dateRange}\r\n                  onChange={(value) => {\r\n                    //@ts-ignore\r\n                    setDateRange(value);\r\n                    setPage(1);\r\n                  }}\r\n                  showOneCalendar={false}\r\n                  locale={{\r\n                    sunday: \"Su\",\r\n                    monday: \"Mo\",\r\n                    tuesday: \"Tu\",\r\n                    wednesday: \"We\",\r\n                    thursday: \"Th\",\r\n                    friday: \"Fr\",\r\n                    saturday: \"Sa\",\r\n                    ok: \"Confirm\",\r\n                  }}\r\n                  ranges={[\r\n                    {\r\n                      label: \"Last week\",\r\n                      //@ts-ignore\r\n                      value: _times[\"Last Week\"],\r\n                    },\r\n                    {\r\n                      label: \"Last 7 days\",\r\n                      value: [dateFns.subDays(new Date(), 6), new Date()],\r\n                    },\r\n                    {\r\n                      label: \"Today\",\r\n                      //@ts-ignore\r\n                      value: _times[\"today\"],\r\n                    },\r\n                    {\r\n                      label: \"This week\",\r\n                      //@ts-ignore\r\n                      value: _times[\"This Week\"],\r\n                    },\r\n                  ]}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Panel>\r\n          {loading ? (\r\n            <Paragraph style={{ marginTop: 30 }} rows={5} active />\r\n          ) : (\r\n            <>\r\n              {questionsData.length > 0 && (\r\n                <Table\r\n                  height={!autoHeight ? 520 : undefined}\r\n                  autoHeight={autoHeight}\r\n                  wordWrap\r\n                  loading={loading}\r\n                  affixHorizontalScrollbar\r\n                  rowClassName={\"cursor-pointer\"}\r\n                  data={questionsData}\r\n                  onRowClick={(rowData) => {\r\n                    if (onClick) onClick(rowData as IQuestionItem);\r\n                  }}\r\n                >\r\n                  <Column width={50} align=\"center\" fixed>\r\n                    <HeaderCell>#</HeaderCell>\r\n                    <Cell>\r\n                      {(rowData, index) => index + pagesize * (page - 1) + 1}\r\n                    </Cell>\r\n                  </Column>\r\n\r\n                  <Column flexGrow={1}>\r\n                    <HeaderCell>Title</HeaderCell>\r\n                    <Cell dataKey=\"title\" />\r\n                  </Column>\r\n\r\n                  <Column flexGrow={2}>\r\n                    <HeaderCell>Created at</HeaderCell>\r\n                    <Cell>\r\n                      {(rowData) => (\r\n                        <span className=\"text-pink-700\">\r\n                          {moment.unix(rowData.creation_date).format(\"LLL\")}\r\n                        </span>\r\n                      )}\r\n                    </Cell>\r\n                  </Column>\r\n                </Table>\r\n              )}\r\n              {questionsData.length === 0 && (\r\n                <div className=\"w-full flex flex-row justify-center items-center font-semibold text-lg\">\r\n                  There is no more data\r\n                </div>\r\n              )}\r\n              <Divider />\r\n              <Pagination\r\n                prev\r\n                last\r\n                next\r\n                first\r\n                size=\"sm\"\r\n                total={1000}\r\n                limit={pagesize}\r\n                maxButtons={5}\r\n                activePage={page}\r\n                onChangePage={setPage}\r\n              />\r\n            </>\r\n          )}\r\n        </Panel>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport { NewestPanel };\r\n\r\nconst styles = {};\r\n","/* eslint-disable */\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useChangeTitle } from \"../../core/hooks/useChangeTitle\";\r\nimport { IQuestionItem } from \"../../core/interfaces\";\r\nimport { DisplayThread } from \"../components/DisplayThread\";\r\nimport { NewestPanel } from \"../components/NewestPanel\";\r\n\r\ninterface INewestProps {}\r\n\r\nconst Newest: React.FC<INewestProps> = React.memo(({}) => {\r\n  const meta = useChangeTitle(\"Newest questions\");\r\n  const [open, setOpen] = useState(false);\r\n  const [rowClickedData, setRowClickedData] = useState<\r\n    IQuestionItem | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <div>\r\n      {meta}\r\n      <NewestPanel\r\n        autoHeight\r\n        onClick={(data) => {\r\n          setRowClickedData(data);\r\n          setOpen(true);\r\n        }}\r\n      />\r\n\r\n      <DisplayThread\r\n        open={open}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        data={rowClickedData}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport { Newest as default };\r\n\r\nconst styles = {};\r\n"],"sourceRoot":""}